import org.openhab.model.script.actions.*
import org.openhab.model.script.actions.Timer
import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.core.types.*
import org.jfree.data.time.RegularTimePeriod
import org.openhab.*
import java.util.ArrayList
import java.util.List
import java.util.date
import org.joda.time.*
import javax.swing.Timer


var int Nbchoix = 5
var boolean lock = true
var boolean lock2 = true
val ArrayList<String> Buffer = new ArrayList()
var int waitime = 100
var int waitime2 = 100

rule Position
when 
	Item Positioning received command
then
	logDebug("Positioning rule","Startup Positioning rule")
	val com = receivedCommand.toString.splitByWholeSeparator(":")
	val choix = com.get(0)
	var int choixNUM = Integer::parseInt(com.get(1))
	var Number count = 0	
	logDebug("Positioning rule","5s avant")
	
	logDebug("Positioning rule","5s apres")
	//--- Init GPIO--//
	logDebug("Positioning rule","Init gpio")
	sendCommand(CommandChoice,OFF)
	sendCommand(UPCOM,OFF)
	sendCommand(DOWNCOM,OFF)
	sendCommand(MY,OFF)
	
	//--Wake UP--//
	logDebug("Positioning rule","Wake up remote")
	sendCommand(CommandChoice,ON)
	Thread::sleep(waitime)
	sendCommand(CommandChoice,OFF)
	Thread::sleep(waitime)
	
	switch(choix){
		case "GO":{
			logDebug("Positioning rule","Direction : Go")
				sendCommand(waittime, ON)
			//	Thread::sleep(waitime)
				sendCommand(CommandChoice,OFF)
				//Thread::sleep(waitime)
				while(time != 31){
					time = time + 1
					logDebug("t","time : " + time)
				}time = 0
				count = count + 1
				logDebug("rolling shutter","->Cursor Position  : " + count)
			}
			sendCommand(Process, "OK")
		}
		case "RETURN":{
		//	Thread::sleep(100)
			logDebug("Positioning rule","Direction : Return")
			logDebug("Positioning rule","->Cursor Position  : " + choixNUM)
			choixNUM = Nbchoix - choixNUM
			while(count < choixNUM){
				sendCommand(CommandChoice,ON)
			//	Thread::sleep(waitime)
			while(time != 31){
					time = time + 1
					logDebug("t","time : " + time)
				}time = 0
				sendCommand(CommandChoice,OFF)
			//	Thread::sleep(waitime)
			while(time != 31){
					time = time + 1
					logDebug("t","time : " + time)
				}time = 0
				count = count + 1
				logDebug("rolling shutter","->Cursor Position : " + (choixNUM - count))
			}
			logDebug("Positioning", " itere = " + itere.state.toString)
			logDebug("Positioning","Waiting")
			Thread::sleep(7000)
			lock = true
		}
	}

end

rule Rolling_Shutter
when 
	Item order received command
then
	logDebug("Safty","lock =" + lock.booleanValue.toString)
	val room = receivedCommand.toString.splitByWholeSeparator(":").get(0)
	val position = receivedCommand.toString.splitByWholeSeparator(":").get(1)
	logDebug("Room"," room : " + room + "/Position : " + position)

	sendCommand(Process, "NOP") //Wait positioning cursor
	sendCommand(Positioning, "GO:" + position)
	logDebug("Room","Proces Positioningi")

	while(Process.state.toString != "OK"){}
	logDebug("Room","Positionnement curseur ok")
	
	switch(room){
		case "UP":{
			logDebug("Room","UP")
			sendCommand(UPCOM,ON)
			Thread::sleep(waitime)
	//		new Handler().postDelayed(new Runnable() {}, 5000L);
	
			sendCommand(UPCOM,OFF)
			Thread::sleep(waitime2)
		}
		case "DOWN":{
			logDebug("Room","DOWN")
			sendCommand(DOWNCOM,ON)
			Thread::sleep(waitime2)
			sendCommand(DOWNCOM,OFF)
			Thread::sleep(waitime2)
		}
		case "MY":{
			logDebug("Room","MY")
			sendCommand(MY,ON)
			Thread::sleep(waitime2)
			sendCommand(MY,OFF)
		}
	}
	sendCommand(Positioning, "RETURN:" + position)
end

rule Safty
when 
	Item shutter received command
then
	logDebug("Safty","lock =" + lock.booleanValue.toString)
	if(lock){
			lock = false
			logDebug("Safty","lock  = " + lock.booleanValue.toString)
			sendCommand(order, receivedCommand.toString)
		}else{
			logDebug("Safty","lock NOT OK")
			switch(lock2){
				case true :{
					logDebug("Safty","lock2: OK")
					Buffer.add(receivedCommand.toString)
					sendCommand(itere, Integer::parseInt(itere.state.toString) + 1)
				}
				case false :{
					logInfo("Safty","can't add to buffer")
				}
			}
		}
end
		
rule buffer

when 
	Item buff received command
then
	lock2 = false
	lock = false
	sendCommand(order, Buffer.get(Integer::parseInt(itere.state.toString) -1))
	logDebug("COM","CMD SENT " + Buffer.get(Integer::parseInt(itere.state.toString) -1) )
	Buffer.remove(Integer::parseInt(itere.state.toString) - 1)
	sendCommand(itere ,Integer::parseInt(itere.state.toString) - 1)
	lock2 = true
end
			
rule CronSec
when
	Time cron  "0/5 * * * * ?"
then
 	if((!lock2 && !lock) && (Integer::parseInt(itere.state.toString) != 0)){
		sendCommand(buff, 1)
	}else{
		switch(Integer::parseInt(itere.state.toString)){
			case 0 :{
				logDebug("CronSec","void buffer" )
			}
			default :{
				logDebug("CronSec","Already lock" )
			}
		}
	}
end


rule Detect_Metal
when
	Item metal received command
then
	logDebug("metal","SHUTTER DETECTED" )
end

rule meteo
when
	Item weather received command
then
	
	val Temperature = receivedCommand.toString.splitByWholeSeparator("=").get(0)
	val Hum = receivedCommand.toString.splitByWholeSeparator("=").get(1)
	
	if(Temperature.length <= 4){sendCommand(Temp, Temperature)}else{sendCommand(Temp, Temperature.substring(0,4))}
	
	if(Hum.length <= 4){sendCommand(Humidity, Hum)}else{sendCommand(Humidity, Hum.substring(0,4))}
	
	logDebug("weather", "Temperature" + Temperature +" Humidity = " + Hum)
end

rule wait
when
	Item waittime received command	
then
	var time = 0
		while(time != 31){
			time = time + 1
			logDebug("t","time : " + time)
	}
		time = 0
end

rule PushBtn
when
	Item pushbtn received command
then
	sendCommand(CommandChoice,ON)
	Thread::sleep(waitime)
	sendCommand(CommandChoice,OFF)
	Thread::sleep(waitime)
end

// A faire
// Remplacer item Itere par la taille du tableau (il faut rÃ©cupe cb il reste de valeur dans le buffer)
// Remplacer while d'attente par un Lock

