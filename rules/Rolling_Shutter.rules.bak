import org.openhab.model.script.actions.*
import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.core.types.*
import org.openhab.*
import java.util.ArrayList
import java.util.List
import java.util.date
import org.joda.time.*

var int Nbchoix = 5
var boolean Secure = true
var boolean Secure2 = true
val ArrayList<String> Buffer = newArrayList()
var Timer timer = null

rule Position
when 
	Item Positioning received command
then
	logDebug("Positioning rule","Startup Positioning rule")
	val com = receivedCommand.toString.splitByWholeSeparator(":")
	val choix = com.get(0)
	var int choixNUM = Integer::parseInt( com.get(1) )
	var Number count = 0
	
	//--- Init GPIO--//
	logDebug("Positioning rule","Init gpio")
	sendCommand(CommandChoice,OFF)
	sendCommand(UPCOM,OFF)
	sendCommand(DOWNCOM,OFF)
	sendCommand(MY,OFF)

	//--Wake UP--//
		logDebug("Positioning rule","Wake up remote")
		sendCommand(CommandChoice,ON)
		Thread::sleep(30)
		sendCommand(CommandChoice,OFF)
		Thread::sleep(30)
	//}
	
	switch(choix){
		case "GO":{
			logDebug("Positioning rule","Direction : Go")
			while(count < choixNUM){
				sendCommand(CommandChoice,ON)
				Thread::sleep(30)
				sendCommand(CommandChoice,OFF)
				Thread::sleep(30)
				count = count + 1
				logDebug("rolling shutter","->Cursor Position  : " + count)
			}
			sendCommand(Process, "OK")
		}
		case "RETURN":{
		//	Thread::sleep(100)
			logDebug("Positioning rule","Direction : Return")
			logDebug("Positioning rule","->Cursor Position  : " + choixNUM)
			choixNUM = Nbchoix - choixNUM
			while(count < choixNUM){
				sendCommand(CommandChoice,ON)
				Thread::sleep(30)
				sendCommand(CommandChoice,OFF)
				Thread::sleep(30)
				count = count + 1
				logDebug("rolling shutter","->Cursor Position : " + (choixNUM - count))
			}
			logDebug("Positioning", " itere = " + itere.state.toString)
			logDebug("Positioning","Waiting")
			Thread::sleep(2000)
			Secure = true
		}
	}

end

rule Rolling_Shutter
when 
	Item order received command
then
	logDebug("Safty","SECURE =" + Secure.booleanValue.toString)
	val room = receivedCommand.toString.splitByWholeSeparator(":").get(0)
	val position = receivedCommand.toString.splitByWholeSeparator(":").get(1)
	logDebug("Room"," room : " + room + "/Position : " + position)

	sendCommand(Process, "NOP") //Wait positioning cursor
	sendCommand(Positioning, "GO:" + position)
	logDebug("Room","Proces Positioningi")

	while(Process.state.toString != "OK"){}
	logDebug("Room","Positionnement curseur ok")
	
	switch(room){
		case "UP":{
			logDebug("Room","UP")
			sendCommand(UPCOM,ON)
			Thread::sleep(50)
			sendCommand(UPCOM,OFF)
			Thread::sleep(50)
		}
		case "DOWN":{
			logDebug("Room","DOWN")
			sendCommand(DOWNCOM,ON)
			Thread::sleep(50)
			sendCommand(DOWNCOM,OFF)
			Thread::sleep(200)
		}
		case "MY":{
			logDebug("Room","MY")
			sendCommand(MY,ON)
			Thread::sleep(200)
			sendCommand(MY,OFF)
		}
	}
	sendCommand(Positioning, "RETURN:" + position)
end

rule Safty
when 
	Item shutter received command
then
	logDebug("Safty","SECURE =" + Secure.booleanValue.toString)
	if(Secure){
			Secure = false
			logDebug("Safty","Secure  = " + Secure.booleanValue.toString)
			sendCommand(order, receivedCommand.toString)
		}else{
			logDebug("Safty","Secure NOT OK")
			switch(Secure2){
				case true :{
					logDebug("Safty","Secure2: OK")
					Buffer.add(receivedCommand.toString)
					sendCommand(itere, Integer::parseInt(itere.state.toString) + 1)
				}
				case false :{
					logInfo("Safty","can't add to buffer")
				}
			}
		}
end
		
rule buffer
when 
	Item buff received command
then
	Secure2 = false
	Secure = false
	sendCommand(order, Buffer.get(Integer::parseInt(itere.state.toString) -1))
	logDebug("COM","CMD SENT " + Buffer.get(Integer::parseInt(itere.state.toString) -1) )
	Buffer.remove(Integer::parseInt(itere.state.toString) - 1)
	sendCommand(itere ,Integer::parseInt(itere.state.toString) - 1)
	Secure2 = true
end
			
rule CronSec
when
	Item cronsec received command
then
	while(true){
		if(timer == null){
			try {	
				timer = createTimer(now.plusSeconds(5)) [|
				 	if(Secure2 && Secure && Integer::parseInt(itere.state.toString) != 0){
						sendCommand(buff, 1)
					}else{
						switch(Integer::parseInt(itere.state.toString)){
							case 0 :{
								logDebug("CronSec","void buffer" )
							}
							default :{
								logDebug("CronSec","Already lock" )
							}
						}
					}
		     	timer = null
		   		]
		   	}catch(java.lang.RuntimeException e){
		   		logDebug("Cronsec", "Error : " + e)
			}	
		}
	}
end


rule Detect_Metal
when
	Item metal received command
then
	logDebug("metal","SHUTTER DETECTED" )
end

rule meteo
when
	Item weather received command
then
	sendCommand(Temp, receivedCommand.toString.splitByWholeSeparator("=").get(0).substring(0,4))
	sendCommand(Humidity, receivedCommand.toString.splitByWholeSeparator("=").get(1).substring(0,4))
	logDebug("weather", "temp" + receivedCommand.toString)
end


// A faire
// Remplacer item Itere par la taille du tableau (il faut r√©cupe cb il reste de valeur dans le buffer)
// Remplacer while d'attente par un Lock

