import org.openhab.core.types.*
import org.openhab.model.script.actions.*
import org.openhab.core.library.types.*
import org.openhab.core.persistence.*

var int Nbchoix = 5


rule rolling
	when Item Testroll received command
		then
			val com = receivedCommand.toString.splitByWholeSeparator(":")
			val choix = com.get(0)
			var int choixNUM = Integer::parseInt( com.get(1) )
			var Number count = 0
			sendCommand(CommandChoice,OFF)
			sendCommand(UPCOM,OFF)
			sendCommand(DOWNCOM,OFF)
			sendCommand(MY,OFF)
			if(choix != "END"){
				sendCommand(CommandChoice,ON)
				Thread::sleep(100)
				sendCommand(CommandChoice,OFF)
				logDebug("rolling shutter","remote intialized")
				Thread::sleep(100)
			}
			switch(choix){
				case "BEGIN":{
					logDebug("rolling shutter","IN IF ")
					while(count < choixNUM){
						sendCommand(CommandChoice,ON)
						Thread::sleep(150)
						sendCommand(CommandChoice,OFF)
						Thread::sleep(150)
						count = count + 1
						logDebug("rolling shutter","count" + count)
					}
					sendCommand(End, "OK")
				}
				case "END":{
					Thread::sleep(100)
					logDebug("rolling shutter","ELSE ")
					choixNUM = Nbchoix - choixNUM
					logDebug("rolling shutter","ELSE ")
					while(count <= choixNUM){
						logDebug("rolling shutter","IN WHILE ")
						sendCommand(CommandChoice,ON)
						Thread::sleep(150)
						sendCommand(CommandChoice,OFF)
						Thread::sleep(150)
						count = count + 1
					}
				}
			}

end

rule chambre1
	when Item chambre_1 received command
		then
		sendCommand(End, "NOP")
		sendCommand(Testroll, "BEGIN:3")
		logDebug("Chambre","CHAMBRE 1" + End.state.toString)
		while(End.state.toString != "OK"){}
		switch(chambre_1.state.toString){
			case "UP":{
				sendCommand(UPCOM,ON)
				Thread::sleep(300)
				sendCommand(UPCOM,OFF)
				Thread::sleep(200)
				logDebug("Chambre 1","UP")
			}
			case "DOWN":{
				sendCommand(DOWNCOM,ON)
				Thread::sleep(300)
				sendCommand(DOWNCOM,OFF)
				Thread::sleep(200)
				logDebug("Chambre 1","DOWN")
			}
			case "MY":{
				sendCommand(MY,ON)
				Thread::sleep(200)
				sendCommand(MY,OFF)
				logDebug("Chambre 1","MY")
			}
		}
		logDebug("Chambre","AVANT LE SENDCOMAND ")
		sendCommand(Testroll, "END:3")
end

rule chambre2
	when Item chambre_2 received command
		then
		sendCommand(End, "NOP")
		sendCommand(Testroll, "BEGIN:2")
		logDebug("Chambre","CHAMBRE 2" + End.state.toString)
		while(End.state.toString != "OK"){}
		switch(chambre_2.state.toString){
			case "UP":{
				sendCommand(UPCOM,ON)
				Thread::sleep(300)
				sendCommand(UPCOM,OFF)
				Thread::sleep(200)
				logDebug("Chambre 2","UP")
			}
			case "DOWN":{
				sendCommand(DOWNCOM,ON)
				Thread::sleep(300)
				sendCommand(DOWNCOM,OFF)
				Thread::sleep(200)
				logDebug("Chambre 2","DOWN")
			}
			case "MY":{
				sendCommand(MY,ON)
				Thread::sleep(200)
				sendCommand(MY,OFF)
				logDebug("Chambre 2","MY")
			}
		}
		logDebug("Chambre","AVANT LE SENDCOMAND ")
		sendCommand(Testroll, "END:2")
end


rule burreau
	when Item burreau received command
		then
		sendCommand(End, "NOP")
		sendCommand(Testroll, "BEGIN:1")
		logDebug("Chambre","CHAMBRE 2" + End.state.toString)
		while(End.state.toString != "OK"){}
		switch(burreau.state.toString){
			case "UP":{
				sendCommand(UPCOM,ON)
				Thread::sleep(300)
				sendCommand(UPCOM,OFF)
				Thread::sleep(200)
				logDebug("Chambre 2","UP")
			}
			case "DOWN":{
				sendCommand(DOWNCOM,ON)
				Thread::sleep(300)
				sendCommand(DOWNCOM,OFF)
				Thread::sleep(200)
				logDebug("Chambre 2","DOWN")
			}
			case "MY":{
				sendCommand(MY,ON)
				Thread::sleep(200)
				sendCommand(MY,OFF)
				logDebug("Chambre 2","MY")
			}
		}
		logDebug("Chambre","AVANT LE SENDCOMAND ")
		sendCommand(Testroll, "END:1")
end

rule All
	when Item Allshutter received command
	then
	val shutters = receivedCommand.toString
	switch(shutters){
			case "UP":{
				sendCommand(UPCOM,ON)
				Thread::sleep(600)
				sendCommand(UPCOM,OFF)
				Thread::sleep(400)
				logDebug("Chambre 2","UP")
			}
			case "DOWN":{
				sendCommand(DOWNCOM,ON)
				Thread::sleep(600)
				sendCommand(DOWNCOM,OFF)
				Thread::sleep(400)
				logDebug("Chambre 2","DOWN")
			}
			case "MY":{
				sendCommand(MY,ON)
				Thread::sleep(400)
				sendCommand(MY,OFF)
				logDebug("Chambre 2","MY")
			}
		}
end
